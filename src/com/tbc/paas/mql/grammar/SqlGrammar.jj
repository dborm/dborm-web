/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SqlGrammar.jj */
/*@egen*/ /**
  * JavaCC file from SQL analyze(support Select and delete ).
  */options{  JDK_VERSION = "1.5";  IGNORE_CASE = true;                   
                                                                                                                                     static = false;}PARSER_BEGIN(SqlGrammar)package com.tbc.paas.mql.grammar;import com.tbc.paas.mql.domain.SqlMetadata;import com.tbc.paas.mql.domain.SqlNode;import com.tbc.paas.mql.domain.SqlNodeFactory;import com.tbc.paas.mql.domain.SqlPhase;import com.tbc.paas.mql.domain.SqlColumn;import com.tbc.paas.mql.domain.SqlTable;@ SuppressWarnings({  "unused", "serial"}) public class SqlGrammar/*@bgen(jjtree)*/implements SqlGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTSqlGrammarState jjtree = new JJTSqlGrammarState();

/*@egen*/  private int globalParameterCount = 0;  private int sliceIndex = 0;  private SqlPhase sqlPhase;  private SqlMetadata sqlMetadata = new SqlMetadata();  public SqlMetadata getSqlMetadata()  {    return this.sqlMetadata;  }  public SqlNode getRootNode()  {    return (SqlNode) jjtree.rootNode();  }  private void setSqlPhase(SqlPhase phase)  {    this.sqlPhase = phase;    sliceIndex = 0;  }}PARSER_END(SqlGrammar)SKIP :{  " "| "\r"| "\t"| "\n"}/**
 *Marks used in SQL,prefixed
 *with M_ to declare it is a mark.
 */TOKEN :{  < M_COMMA : "," >| < M_QUERY : "?" >| < M_L_BRACKET : "(" >| < M_R_BRACKET : ")" >| < M_EQUAL : "=" >| < M_ATTACH : "||" >| < M_GT : ">" >| < M_LT : "<" >| < M_EXCLAMATION : "!" >| < M_COLON : ":" >}TOKEN : /* SQL  Keywords, prefixed with K_ to avoid name clashes*/{  < K_ALL : "ALL" >| < K_AS : "AS" >| < K_SELECT : "SELECT" >| < K_DISTINCT : "DISTINCT" >| < K_DELETE : "DELETE" >| < K_AND : "AND" >| < K_OR : "OR" >| < K_FROM : "FROM" >| < K_WHERE : "WHERE" >| < K_COUNT : "COUNT" >| < K_MAX : "MAX" >| < K_MIN : "MIN" >| < K_SUM : "SUM" >| < K_AVG : "AVG" >| < K_LEFT : "LEFT" >| < K_RIGHT : "RIGHT" >| < K_INNER : "INNER" >| < K_FULL : "FULL" >| < K_OUTER : "OUTER" >| < K_JOIN : "JOIN" >| < K_ON : "ON" >| < K_UPDATE : "UPDATE" >| < K_SET : "SET" >| < K_INSERT : "INSERT" >| < K_INTO : "INTO" >| < K_VALUES : "VALUES" >| < K_NOT : "NOT" >| < K_NULL : "NULL" >| < K_BETWEEN : "BETWEEN" >| < K_DESC : "DESC" >| < K_ASC : "ASC" >| < K_EXISTS : "EXISTS" >| < K_GROUP : "GROUP" >| < K_HAVING : "HAVING" >| < K_IS : "IS" >| < K_ORDER : "ORDER" >| < K_BY : "BY" >| < K_LIKE : "LIKE" >| < K_IN : "IN" >| < K_LIMIT : "LIMIT" >| < K_OFFSET : "OFFSET " >| < K_TRUE : "TRUE" >| < K_FALSE : "FALSE" >}TOKEN : /* Numeric Constants */{  < S_NUMBER :    < FLOAT >  | < FLOAT >    (      [ "e", "E" ] ([ "-", "+" ])? < FLOAT >    )? >| < #FLOAT :    < INTEGER >  | < INTEGER > ("." < INTEGER >)?  | "." < INTEGER > >| < #INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < S_IDENTIFIER :    < IDENTIFIER >    (      "." (< IDENTIFIER >)    )? >| < #IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    "$"  | "_" >| < S_VALUE : "'" (~[ "'" ])* "'" >}void analyze()       :{}{  analyzeSelect()| analyzeDelete()| analyzeUpdate()| analyzeInsert()}//Analyze Delete Sql
void analyzeDelete()         :{/*@bgen(jjtree) Delete */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Delete */
  try {
/*@egen*/  < K_DELETE > < K_FROM > t = < S_IDENTIFIER >  {    jjtn000.jjtSetValue(t.image);    SqlTable sqlTable = new SqlTable(t.image);    sqlMetadata.addTable(sqlTable);  }  [ analyzeWhereSegment() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeUpdate()         :{/*@bgen(jjtree) Update */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  sqlPhase = SqlPhase.UPDATE;}{/*@bgen(jjtree) Update */
  try {
/*@egen*/  < K_UPDATE > t = < S_IDENTIFIER > < K_SET > analyzeUpdateColumns()  [    < K_WHERE >    {      sqlPhase = SqlPhase.WHERE;    }/*@bgen(jjtree) Where */
    {
      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTWHERE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    analyzeCondition()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    SqlTable sqlTable = new SqlTable(t.image);    sqlMetadata.addTable(sqlTable);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeUpdateColumns()                :{/*@bgen(jjtree) UpdateColumns */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTUPDATECOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UpdateColumns */
  try {
/*@egen*/  analyzeUpdateColumn()  (    < M_COMMA > analyzeUpdateColumn()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeUpdateColumn()               :{/*@bgen(jjtree) UpdateColumn */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTUPDATECOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UpdateColumn */
  try {
/*@egen*/  analyzeColumnName() < M_EQUAL >  (    ananayzeValuePostion() [ analyzeArithmeticOperators() analyzeColumnName() ]  |    (      analyzeColumnName() analyzeArithmeticOperators() ananayzeValuePostion()    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeArithmeticOperators()                     :{/*@bgen(jjtree) ArithmeticOperator */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ArithmeticOperator */
  try {
/*@egen*/  (    t = "+"  | t = "-"  | t = "*"  | t = "/"  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeInsert()         :{/*@bgen(jjtree) Insert */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Insert */
  try {
/*@egen*/  < K_INSERT > < K_INTO > t = < S_IDENTIFIER >  {    sqlPhase = SqlPhase.INSERT;    sliceIndex = 0;  }  [ analyzeInsertColumns() ] analyzeValues()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    SqlTable sqlTable = new SqlTable(t.image);    sqlMetadata.addTable(sqlTable);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeInsertColumns()          :{/*@bgen(jjtree) Columns */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Columns */
  try {
/*@egen*/  < M_L_BRACKET > analyzeColumnName()  (    {      sliceIndex++;    }    < M_COMMA > analyzeColumnName()  )*  < M_R_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeValues()         :{/*@bgen(jjtree) Values */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Values */
  try {
/*@egen*/  < K_VALUES > < M_L_BRACKET > ananayzeValuePostion()  (    < M_COMMA > ananayzeValuePostion()  )*  < M_R_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeSelect()         :{/*@bgen(jjtree) Select */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Select */
  try {
/*@egen*/  < K_SELECT > analyzeColumnSegment() analyzeFromSegment() [ analyzeWhereSegment() ] [ analyzeGroupSegment() ] [ analyzeOrderSegment() ] [ analyzeLimitSegment() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeLimitSegment()               :{/*@bgen(jjtree) LimitSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTLIMITSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LimitSegment */
  try {
/*@egen*/  (    analyzeLimit() [ analyzeOffset() ]  )|  (    analyzeOffset() [ analyzeLimit() ]  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeLimit()        :{/*@bgen(jjtree) LIMIT */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LIMIT */
  try {
/*@egen*/  < K_LIMIT > ananayzeValuePostion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeOffset()         :{/*@bgen(jjtree) OFFSET */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OFFSET */
  try {
/*@egen*/  < K_OFFSET > ananayzeValuePostion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeColumnSegment()                :{/*@bgen(jjtree) ColumnSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMNSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  sqlPhase = SqlPhase.SELECT;  sliceIndex = 0;}{/*@bgen(jjtree) ColumnSegment */
  try {
/*@egen*/  [/*@bgen(jjtree) Distinct */
    {
      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTDISTINCT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    < K_DISTINCT >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/            | < K_ALL >  ]  (analyzeColumn() (< M_COMMA > analyzeColumn()) *)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeFromSegment()              :{/*@bgen(jjtree) FromSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTFROMSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  sqlPhase = SqlPhase.FROM;  sliceIndex = 0;}{/*@bgen(jjtree) FromSegment */
  try {
/*@egen*/  < K_FROM > analyzeTable()  (    {      sliceIndex++;    }    < M_COMMA > analyzeTable()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeWhereSegment()               :{/*@bgen(jjtree) WhereSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTWHERESEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  sqlPhase = SqlPhase.WHERE;  sliceIndex = 0;}{/*@bgen(jjtree) WhereSegment */
  try {
/*@egen*/  < K_WHERE > analyzeCondition()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeColumn()         :{/*@bgen(jjtree) Column */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Column */
  try {
/*@egen*/  (    analyzeColumnName()  | analyzeAggregationFunction()  )  [ analyzeAlias() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyJoin()       :{/*@bgen(jjtree) Join */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String join;}{/*@bgen(jjtree) Join */
  try {
/*@egen*/  (    < K_LEFT > [ < K_OUTER > ] < K_JOIN >    {      join = " LEFT JOIN ";    }  | < K_RIGHT > [ < K_OUTER > ] < K_JOIN >    {      join = " RIGHT JOIN ";    }  | < K_FULL > [ < K_OUTER > ] < K_JOIN >    {      join = " FULL JOIN ";    }  | [ < K_INNER > ] < K_JOIN >    {      join = " INNER JOIN ";    }  )  analyzeTable() < K_ON >/*@bgen(jjtree) JoinCondition */
                          {
                            SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTJOINCONDITION);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ analyzeCondition()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/               /*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(join);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeTable()        :{/*@bgen(jjtree) Table */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String tableAlias = null;}{/*@bgen(jjtree) Table */
  try {
/*@egen*/  t = < S_IDENTIFIER > [ tableAlias = analyzeTableAlias() ]  {    SqlTable sqlTable = new SqlTable(t.image, tableAlias, sliceIndex);    sqlMetadata.addTable(sqlTable);    jjtn000.jjtSetValue(sqlTable);  }  (    analyJoin()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeNullOperator()       :{/*@bgen(jjtree) Null */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Null */
  try {
/*@egen*/  < K_IS >  [    < K_NOT >    {      jjtn000.jjtSetValue(true);    }  ]  < K_NULL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeInOrLikeOperator()       :{}{  [/*@bgen(jjtree) Not */
    {
      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTNOT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ < K_NOT >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      ] (analyzeIn()| analyzeLike())}void analyzeIn()     :{/*@bgen(jjtree) In */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) In */
  try {
/*@egen*/  < K_IN > < M_L_BRACKET > ananayzeValuePostion()  (    < M_COMMA > ananayzeValuePostion()  )*  < M_R_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeBinaryOperator()                 :{/*@bgen(jjtree) BinaryOperator */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBINARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token first = null, second = null;}{/*@bgen(jjtree) BinaryOperator */
  try {
/*@egen*/  (    first = < M_EQUAL >  | first = < M_EXCLAMATION > second = < M_EQUAL >  | first = < M_GT > (second = < M_EQUAL >)?  | first = < M_LT >    (      second = < M_EQUAL >    | second = < M_GT >    )?  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    String operator = first.image;    if (second != null)    {      operator += second.image;    }    jjtn000.jjtSetValue(operator);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeGroupSegment()               :{/*@bgen(jjtree) GroupSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTGROUPSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  sqlPhase = SqlPhase.GROUP;  sliceIndex = 0;}{/*@bgen(jjtree) GroupSegment */
  try {
/*@egen*/  < K_GROUP > < K_BY > analyzeColumnName()  (    < M_COMMA > analyzeColumnName()  )*  [ < K_HAVING >/*@bgen(jjtree) Having */
                 {
                   SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTHAVING);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ analyzeCondition()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/         ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeCondition()       :{}{  (    analyzeConditionSlice()  | < M_L_BRACKET >/*@bgen(jjtree) #BlockCondition(> 1) */
                    {
                      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBLOCKCONDITION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ analyzeCondition()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                      }
                    }
/*@egen*/                      < M_R_BRACKET >)(  LOOKAHEAD(2)  (/*@bgen(jjtree) Add */
    {
      SqlNode jjtn002 = (SqlNode)SqlNodeFactory.jjtCreate(JJTADD);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/    < K_AND >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/       |/*@bgen(jjtree) Or */
    {
      SqlNode jjtn003 = (SqlNode)SqlNodeFactory.jjtCreate(JJTOR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ < K_OR >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/    )  analyzeCondition())*}void analyzeConditionSlice()                 :{/*@bgen(jjtree) ConditionSlice */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCONDITIONSLICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConditionSlice */
  try {
/*@egen*/  (    (      analyzeColumnName()    | analyzeAggregationFunction()    )    (      (        analyzeBinaryOperator()        (          analyzeColumnName()        | ananayzeValuePostion()        )      )    | analyzeInOrLikeOperator()    | analyzeNullOperator()    | analyBetweenOperator()    )  )|  (    ananayzeValuePostion() analyzeBinaryOperator()    (      analyzeColumnName()    | ananayzeValuePostion()    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeLike()       :{/*@bgen(jjtree) Like */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTLIKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Like */
  try {
/*@egen*/  < K_LIKE > ananayzeValuePostion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyBetweenOperator()          :{/*@bgen(jjtree) Between */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Between */
  try {
/*@egen*/  < K_BETWEEN > ananayzeValuePostion() < K_AND > ananayzeValuePostion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeOrderSegment()               :{/*@bgen(jjtree) OrderSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTORDERSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  sqlPhase = SqlPhase.ORDER;  sliceIndex = 0;  Token t;}{/*@bgen(jjtree) OrderSegment */
  try {
/*@egen*/  < K_ORDER > < K_BY > anaylyzeOrderSlice()  (    < M_COMMA > anaylyzeOrderSlice()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void anaylyzeOrderSlice()       :{}{  (    analyzeColumnName()  | analyzeAggregationFunction()  )  [ analyzeOrder() ]}private void analyzeOrder()        :{/*@bgen(jjtree) Order */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTORDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Order */
  try {
/*@egen*/  (    t = < K_DESC >  | t = < K_ASC >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image.toUpperCase());  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeAggregationFunction()            :{/*@bgen(jjtree) Aggregate */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTAGGREGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token f;}{/*@bgen(jjtree) Aggregate */
  try {
/*@egen*/  (    f = < K_MAX >  | f = < K_MIN >  | f = < K_COUNT >  | f = < K_SUM >  | f = < K_AVG >  )  {    jjtn000.jjtSetValue(f.image);  }  < M_L_BRACKET >  (    analyzeColumnName()  | analyzeFunctionDistinct()  )  < M_R_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String analyzeTableAlias()       :{  Token alias;}{  [ < K_AS > ] alias = < S_IDENTIFIER >  {    return alias.image;  }}void analyzeColumnName()             :{/*@bgen(jjtree) ColumnName */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ColumnName */
  try {
/*@egen*/  (    t = < S_IDENTIFIER >  | t = "*"  | t = < S_P_IDENTIFIER : < IDENTIFIER > ".*" >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    SqlColumn column = new SqlColumn(t.image, sqlPhase, sliceIndex);    jjtn000.jjtSetValue(column);    sqlMetadata.addColumn(column);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeFunctionDistinct()                   :{/*@bgen(jjtree) FunctionDistinct */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTFUNCTIONDISTINCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDistinct */
  try {
/*@egen*/  < K_DISTINCT >  (    analyzeColumnName()  |    (      < M_L_BRACKET > analyzeColumnName() < M_R_BRACKET >    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeAlias()        :{/*@bgen(jjtree) Alias */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token alias;}{/*@bgen(jjtree) Alias */
  try {
/*@egen*/  [ < K_AS > ] alias = < S_IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(alias.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ananayzeValuePostion()       :{}{  analyzeParameter()| analyzePlaceholder()| analyzeValue()| analyzeNumber()| analyzeBoolean()}void analyzeParameter()            :{/*@bgen(jjtree) Parameter */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Parameter */
  try {
/*@egen*/  < M_QUERY >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(globalParameterCount);    globalParameterCount++;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzePlaceholder()              :{/*@bgen(jjtree) Placeholder */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTPLACEHOLDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Placeholder */
  try {
/*@egen*/  < M_COLON > t = < S_IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeValue()        :{/*@bgen(jjtree) Value */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Value */
  try {
/*@egen*/  t = < S_VALUE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeNumber()         :{/*@bgen(jjtree) Number */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Number */
  try {
/*@egen*/  t = < S_NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void analyzeBoolean()          :{/*@bgen(jjtree) Boolean */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Boolean */
  try {
/*@egen*/  (    t = < K_TRUE >  | t = < K_FALSE >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}