/* Generated By:JJTree&JavaCC: Do not edit this line. SqlGrammar.java */
package com.tbc.paas.mql.grammar;
import com.tbc.paas.mql.domain.SqlMetadata;
import com.tbc.paas.mql.domain.SqlNode;
import com.tbc.paas.mql.domain.SqlNodeFactory;
import com.tbc.paas.mql.domain.SqlPhase;
import com.tbc.paas.mql.domain.SqlColumn;
import com.tbc.paas.mql.domain.SqlTable;
@ SuppressWarnings(
{
  "unused", "serial"
}

) public class SqlGrammar/*@bgen(jjtree)*/implements SqlGrammarTreeConstants, SqlGrammarConstants {/*@bgen(jjtree)*/
  protected JJTSqlGrammarState jjtree = new JJTSqlGrammarState();private int globalParameterCount = 0;

  private int sliceIndex = 0;

  private SqlPhase sqlPhase;

  private SqlMetadata sqlMetadata = new SqlMetadata();

  public SqlMetadata getSqlMetadata()
  {
    return this.sqlMetadata;
  }

  public SqlNode getRootNode()
  {
    return (SqlNode) jjtree.rootNode();
  }

  private void setSqlPhase(SqlPhase phase)
  {
    this.sqlPhase = phase;
    sliceIndex = 0;
  }

  final public void analyze() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
      analyzeSelect();
      break;
    case K_DELETE:
      analyzeDelete();
      break;
    case K_UPDATE:
      analyzeUpdate();
      break;
    case K_INSERT:
      analyzeInsert();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Analyze Delete Sql
  final public void analyzeDelete() throws ParseException {
 /*@bgen(jjtree) Delete */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_DELETE);
      jj_consume_token(K_FROM);
      t = jj_consume_token(S_IDENTIFIER);
    jjtn000.jjtSetValue(t.image);
    SqlTable sqlTable = new SqlTable(t.image);
    sqlMetadata.addTable(sqlTable);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        analyzeWhereSegment();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeUpdate() throws ParseException {
 /*@bgen(jjtree) Update */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  sqlPhase = SqlPhase.UPDATE;
    try {
      jj_consume_token(K_UPDATE);
      t = jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_SET);
      analyzeUpdateColumns();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        jj_consume_token(K_WHERE);
      sqlPhase = SqlPhase.WHERE;
      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTWHERE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          analyzeCondition();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    SqlTable sqlTable = new SqlTable(t.image);
    sqlMetadata.addTable(sqlTable);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeUpdateColumns() throws ParseException {
 /*@bgen(jjtree) UpdateColumns */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTUPDATECOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      analyzeUpdateColumn();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(M_COMMA);
        analyzeUpdateColumn();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeUpdateColumn() throws ParseException {
 /*@bgen(jjtree) UpdateColumn */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTUPDATECOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      analyzeColumnName();
      jj_consume_token(M_EQUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case M_QUERY:
      case M_COLON:
      case K_TRUE:
      case K_FALSE:
      case S_NUMBER:
      case S_VALUE:
        ananayzeValuePostion();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 67:
        case 68:
        case 69:
        case 70:
          analyzeArithmeticOperators();
          analyzeColumnName();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      case S_IDENTIFIER:
      case 69:
      case S_P_IDENTIFIER:
        analyzeColumnName();
        analyzeArithmeticOperators();
        ananayzeValuePostion();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeArithmeticOperators() throws ParseException {
 /*@bgen(jjtree) ArithmeticOperator */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        t = jj_consume_token(67);
        break;
      case 68:
        t = jj_consume_token(68);
        break;
      case 69:
        t = jj_consume_token(69);
        break;
      case 70:
        t = jj_consume_token(70);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeInsert() throws ParseException {
 /*@bgen(jjtree) Insert */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      t = jj_consume_token(S_IDENTIFIER);
    sqlPhase = SqlPhase.INSERT;
    sliceIndex = 0;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case M_L_BRACKET:
        analyzeInsertColumns();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      analyzeValues();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    SqlTable sqlTable = new SqlTable(t.image);
    sqlMetadata.addTable(sqlTable);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeInsertColumns() throws ParseException {
 /*@bgen(jjtree) Columns */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(M_L_BRACKET);
      analyzeColumnName();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
      sliceIndex++;
        jj_consume_token(M_COMMA);
        analyzeColumnName();
      }
      jj_consume_token(M_R_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeValues() throws ParseException {
 /*@bgen(jjtree) Values */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_VALUES);
      jj_consume_token(M_L_BRACKET);
      ananayzeValuePostion();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(M_COMMA);
        ananayzeValuePostion();
      }
      jj_consume_token(M_R_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeSelect() throws ParseException {
 /*@bgen(jjtree) Select */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      analyzeColumnSegment();
      analyzeFromSegment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        analyzeWhereSegment();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
        analyzeGroupSegment();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        analyzeOrderSegment();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LIMIT:
      case K_OFFSET:
        analyzeLimitSegment();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeLimitSegment() throws ParseException {
 /*@bgen(jjtree) LimitSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTLIMITSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LIMIT:
        analyzeLimit();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OFFSET:
          analyzeOffset();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      case K_OFFSET:
        analyzeOffset();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LIMIT:
          analyzeLimit();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeLimit() throws ParseException {
 /*@bgen(jjtree) LIMIT */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LIMIT);
      ananayzeValuePostion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeOffset() throws ParseException {
 /*@bgen(jjtree) OFFSET */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_OFFSET);
      ananayzeValuePostion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeColumnSegment() throws ParseException {
 /*@bgen(jjtree) ColumnSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMNSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);sqlPhase = SqlPhase.SELECT;
  sliceIndex = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DISTINCT:
      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTDISTINCT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(K_DISTINCT);
          } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
          }
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      analyzeColumn();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_4;
        }
        jj_consume_token(M_COMMA);
        analyzeColumn();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeFromSegment() throws ParseException {
 /*@bgen(jjtree) FromSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTFROMSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);sqlPhase = SqlPhase.FROM;
  sliceIndex = 0;
    try {
      jj_consume_token(K_FROM);
      analyzeTable();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
      sliceIndex++;
        jj_consume_token(M_COMMA);
        analyzeTable();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeWhereSegment() throws ParseException {
 /*@bgen(jjtree) WhereSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTWHERESEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);sqlPhase = SqlPhase.WHERE;
  sliceIndex = 0;
    try {
      jj_consume_token(K_WHERE);
      analyzeCondition();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeColumn() throws ParseException {
 /*@bgen(jjtree) Column */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case 69:
      case S_P_IDENTIFIER:
        analyzeColumnName();
        break;
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_SUM:
      case K_AVG:
        analyzeAggregationFunction();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case S_IDENTIFIER:
        analyzeAlias();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyJoin() throws ParseException {
 /*@bgen(jjtree) Join */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String join;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LEFT:
        jj_consume_token(K_LEFT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OUTER:
          jj_consume_token(K_OUTER);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        jj_consume_token(K_JOIN);
      join = " LEFT JOIN ";
        break;
      case K_RIGHT:
        jj_consume_token(K_RIGHT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OUTER:
          jj_consume_token(K_OUTER);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(K_JOIN);
      join = " RIGHT JOIN ";
        break;
      case K_FULL:
        jj_consume_token(K_FULL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OUTER:
          jj_consume_token(K_OUTER);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(K_JOIN);
      join = " FULL JOIN ";
        break;
      case K_INNER:
      case K_JOIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INNER:
          jj_consume_token(K_INNER);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(K_JOIN);
      join = " INNER JOIN ";
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      analyzeTable();
      jj_consume_token(K_ON);
                            SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTJOINCONDITION);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        analyzeCondition();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(join);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeTable() throws ParseException {
 /*@bgen(jjtree) Table */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String tableAlias = null;
    try {
      t = jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case S_IDENTIFIER:
        tableAlias = analyzeTableAlias();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    SqlTable sqlTable = new SqlTable(t.image, tableAlias, sliceIndex);
    sqlMetadata.addTable(sqlTable);
    jjtn000.jjtSetValue(sqlTable);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LEFT:
        case K_RIGHT:
        case K_INNER:
        case K_FULL:
        case K_JOIN:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_6;
        }
        analyJoin();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeNullOperator() throws ParseException {
 /*@bgen(jjtree) Null */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      jjtn000.jjtSetValue(true);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(K_NULL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeInOrLikeOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTNOT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(K_NOT);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IN:
      analyzeIn();
      break;
    case K_LIKE:
      analyzeLike();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void analyzeIn() throws ParseException {
 /*@bgen(jjtree) In */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IN);
      jj_consume_token(M_L_BRACKET);
      ananayzeValuePostion();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_7;
        }
        jj_consume_token(M_COMMA);
        ananayzeValuePostion();
      }
      jj_consume_token(M_R_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeBinaryOperator() throws ParseException {
 /*@bgen(jjtree) BinaryOperator */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBINARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token first = null, second = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case M_EQUAL:
        first = jj_consume_token(M_EQUAL);
        break;
      case M_EXCLAMATION:
        first = jj_consume_token(M_EXCLAMATION);
        second = jj_consume_token(M_EQUAL);
        break;
      case M_GT:
        first = jj_consume_token(M_GT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_EQUAL:
          second = jj_consume_token(M_EQUAL);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        break;
      case M_LT:
        first = jj_consume_token(M_LT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_EQUAL:
        case M_GT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case M_EQUAL:
            second = jj_consume_token(M_EQUAL);
            break;
          case M_GT:
            second = jj_consume_token(M_GT);
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    String operator = first.image;
    if (second != null)
    {
      operator += second.image;
    }
    jjtn000.jjtSetValue(operator);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeGroupSegment() throws ParseException {
 /*@bgen(jjtree) GroupSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTGROUPSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);sqlPhase = SqlPhase.GROUP;
  sliceIndex = 0;
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      analyzeColumnName();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_8;
        }
        jj_consume_token(M_COMMA);
        analyzeColumnName();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HAVING:
        jj_consume_token(K_HAVING);
                   SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTHAVING);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
          analyzeCondition();
        } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case M_QUERY:
    case M_COLON:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
    case K_AVG:
    case K_TRUE:
    case K_FALSE:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_VALUE:
    case 69:
    case S_P_IDENTIFIER:
      analyzeConditionSlice();
      break;
    case M_L_BRACKET:
      jj_consume_token(M_L_BRACKET);
                      SqlNode jjtn001 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBLOCKCONDITION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
        analyzeCondition();
      } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                      }
      }
      jj_consume_token(M_R_BRACKET);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
      SqlNode jjtn002 = (SqlNode)SqlNodeFactory.jjtCreate(JJTADD);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(K_AND);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      case K_OR:
      SqlNode jjtn003 = (SqlNode)SqlNodeFactory.jjtCreate(JJTOR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(K_OR);
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      analyzeCondition();
    }
  }

  final public void analyzeConditionSlice() throws ParseException {
 /*@bgen(jjtree) ConditionSlice */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCONDITIONSLICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_SUM:
      case K_AVG:
      case S_IDENTIFIER:
      case 69:
      case S_P_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case 69:
        case S_P_IDENTIFIER:
          analyzeColumnName();
          break;
        case K_COUNT:
        case K_MAX:
        case K_MIN:
        case K_SUM:
        case K_AVG:
          analyzeAggregationFunction();
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_EQUAL:
        case M_GT:
        case M_LT:
        case M_EXCLAMATION:
          analyzeBinaryOperator();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_IDENTIFIER:
          case 69:
          case S_P_IDENTIFIER:
            analyzeColumnName();
            break;
          case M_QUERY:
          case M_COLON:
          case K_TRUE:
          case K_FALSE:
          case S_NUMBER:
          case S_VALUE:
            ananayzeValuePostion();
            break;
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case K_NOT:
        case K_LIKE:
        case K_IN:
          analyzeInOrLikeOperator();
          break;
        case K_IS:
          analyzeNullOperator();
          break;
        case K_BETWEEN:
          analyBetweenOperator();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case M_QUERY:
      case M_COLON:
      case K_TRUE:
      case K_FALSE:
      case S_NUMBER:
      case S_VALUE:
        ananayzeValuePostion();
        analyzeBinaryOperator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case 69:
        case S_P_IDENTIFIER:
          analyzeColumnName();
          break;
        case M_QUERY:
        case M_COLON:
        case K_TRUE:
        case K_FALSE:
        case S_NUMBER:
        case S_VALUE:
          ananayzeValuePostion();
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeLike() throws ParseException {
 /*@bgen(jjtree) Like */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTLIKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LIKE);
      ananayzeValuePostion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyBetweenOperator() throws ParseException {
 /*@bgen(jjtree) Between */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BETWEEN);
      ananayzeValuePostion();
      jj_consume_token(K_AND);
      ananayzeValuePostion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeOrderSegment() throws ParseException {
 /*@bgen(jjtree) OrderSegment */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTORDERSEGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);sqlPhase = SqlPhase.ORDER;
  sliceIndex = 0;
  Token t;
    try {
      jj_consume_token(K_ORDER);
      jj_consume_token(K_BY);
      anaylyzeOrderSlice();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case M_COMMA:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_10;
        }
        jj_consume_token(M_COMMA);
        anaylyzeOrderSlice();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void anaylyzeOrderSlice() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case 69:
    case S_P_IDENTIFIER:
      analyzeColumnName();
      break;
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
    case K_AVG:
      analyzeAggregationFunction();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DESC:
    case K_ASC:
      analyzeOrder();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  final private void analyzeOrder() throws ParseException {
 /*@bgen(jjtree) Order */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTORDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DESC:
        t = jj_consume_token(K_DESC);
        break;
      case K_ASC:
        t = jj_consume_token(K_ASC);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image.toUpperCase());
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeAggregationFunction() throws ParseException {
 /*@bgen(jjtree) Aggregate */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTAGGREGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token f;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_MAX:
        f = jj_consume_token(K_MAX);
        break;
      case K_MIN:
        f = jj_consume_token(K_MIN);
        break;
      case K_COUNT:
        f = jj_consume_token(K_COUNT);
        break;
      case K_SUM:
        f = jj_consume_token(K_SUM);
        break;
      case K_AVG:
        f = jj_consume_token(K_AVG);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtn000.jjtSetValue(f.image);
      jj_consume_token(M_L_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case 69:
      case S_P_IDENTIFIER:
        analyzeColumnName();
        break;
      case K_DISTINCT:
        analyzeFunctionDistinct();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(M_R_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String analyzeTableAlias() throws ParseException {
  Token alias;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    alias = jj_consume_token(S_IDENTIFIER);
    {if (true) return alias.image;}
    throw new Error("Missing return statement in function");
  }

  final public void analyzeColumnName() throws ParseException {
 /*@bgen(jjtree) ColumnName */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        t = jj_consume_token(S_IDENTIFIER);
        break;
      case 69:
        t = jj_consume_token(69);
        break;
      case S_P_IDENTIFIER:
        t = jj_consume_token(S_P_IDENTIFIER);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    SqlColumn column = new SqlColumn(t.image, sqlPhase, sliceIndex);
    jjtn000.jjtSetValue(column);
    sqlMetadata.addColumn(column);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeFunctionDistinct() throws ParseException {
 /*@bgen(jjtree) FunctionDistinct */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTFUNCTIONDISTINCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DISTINCT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case 69:
      case S_P_IDENTIFIER:
        analyzeColumnName();
        break;
      case M_L_BRACKET:
        jj_consume_token(M_L_BRACKET);
        analyzeColumnName();
        jj_consume_token(M_R_BRACKET);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeAlias() throws ParseException {
 /*@bgen(jjtree) Alias */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token alias;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      alias = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(alias.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ananayzeValuePostion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case M_QUERY:
      analyzeParameter();
      break;
    case M_COLON:
      analyzePlaceholder();
      break;
    case S_VALUE:
      analyzeValue();
      break;
    case S_NUMBER:
      analyzeNumber();
      break;
    case K_TRUE:
    case K_FALSE:
      analyzeBoolean();
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void analyzeParameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(M_QUERY);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(globalParameterCount);
    globalParameterCount++;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzePlaceholder() throws ParseException {
 /*@bgen(jjtree) Placeholder */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTPLACEHOLDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(M_COLON);
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeValue() throws ParseException {
 /*@bgen(jjtree) Value */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_VALUE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeNumber() throws ParseException {
 /*@bgen(jjtree) Number */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void analyzeBoolean() throws ParseException {
 /*@bgen(jjtree) Boolean */
  SqlNode jjtn000 = (SqlNode)SqlNodeFactory.jjtCreate(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TRUE:
        t = jj_consume_token(K_TRUE);
        break;
      case K_FALSE:
        t = jj_consume_token(K_FALSE);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(S_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(K_AND)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(M_COLON)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(M_L_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(M_QUERY)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SqlGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[59];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0000,0x800000,0x800000,0x20,0x0,0x4040,0x0,0x80,0x20,0x20,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x48000,0x48000,0x20,0x20,0x1f000000,0x10000,0x0,0x0,0x0,0x80000000,0xe0000000,0x10000,0xe0000000,0x0,0x0,0x0,0x20,0x200,0xa00,0xa00,0x3a00,0x20,0x0,0x1f0040c0,0x300000,0x1f000000,0x4040,0x3a00,0x4040,0x1f004040,0x20,0x1f000000,0x0,0x0,0x1f000000,0x40000,0x10000,0x0,0x80,0x10000,0x4040,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x50,0x0,0x0,0x0,0x0,0x47000000,0x0,0x0,0x0,0x0,0x0,0x8000,0x40000,0xc00000,0x800000,0x400000,0xc00000,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x2,0x2,0x2,0x0,0x5,0x40000000,0x5,0x200,0x200,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x47000000,0x0,0x40000000,0x47000000,0x320a00,0x47000000,0x47000000,0x0,0x40000000,0x3000,0x3000,0x0,0x40000000,0x0,0x40000000,0x40000000,0x0,0x7000000,0x3000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x78,0xa4,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa4,0x0,0xa0,0xa4,0x0,0xa4,0xa4,0x0,0xa0,0x0,0x0,0x0,0xa0,0x0,0xa0,0xa0,0x0,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SqlGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 59; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 59; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SqlGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 59; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 59; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SqlGrammar(SqlGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 59; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SqlGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 59; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 59; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
