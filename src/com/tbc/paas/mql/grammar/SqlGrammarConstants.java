/* Generated By:JJTree&JavaCC: Do not edit this line. SqlGrammarConstants.java */
package com.tbc.paas.mql.grammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SqlGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int M_COMMA = 5;
  /** RegularExpression Id. */
  int M_QUERY = 6;
  /** RegularExpression Id. */
  int M_L_BRACKET = 7;
  /** RegularExpression Id. */
  int M_R_BRACKET = 8;
  /** RegularExpression Id. */
  int M_EQUAL = 9;
  /** RegularExpression Id. */
  int M_ATTACH = 10;
  /** RegularExpression Id. */
  int M_GT = 11;
  /** RegularExpression Id. */
  int M_LT = 12;
  /** RegularExpression Id. */
  int M_EXCLAMATION = 13;
  /** RegularExpression Id. */
  int M_COLON = 14;
  /** RegularExpression Id. */
  int K_ALL = 15;
  /** RegularExpression Id. */
  int K_AS = 16;
  /** RegularExpression Id. */
  int K_SELECT = 17;
  /** RegularExpression Id. */
  int K_DISTINCT = 18;
  /** RegularExpression Id. */
  int K_DELETE = 19;
  /** RegularExpression Id. */
  int K_AND = 20;
  /** RegularExpression Id. */
  int K_OR = 21;
  /** RegularExpression Id. */
  int K_FROM = 22;
  /** RegularExpression Id. */
  int K_WHERE = 23;
  /** RegularExpression Id. */
  int K_COUNT = 24;
  /** RegularExpression Id. */
  int K_MAX = 25;
  /** RegularExpression Id. */
  int K_MIN = 26;
  /** RegularExpression Id. */
  int K_SUM = 27;
  /** RegularExpression Id. */
  int K_AVG = 28;
  /** RegularExpression Id. */
  int K_LEFT = 29;
  /** RegularExpression Id. */
  int K_RIGHT = 30;
  /** RegularExpression Id. */
  int K_INNER = 31;
  /** RegularExpression Id. */
  int K_FULL = 32;
  /** RegularExpression Id. */
  int K_OUTER = 33;
  /** RegularExpression Id. */
  int K_JOIN = 34;
  /** RegularExpression Id. */
  int K_ON = 35;
  /** RegularExpression Id. */
  int K_UPDATE = 36;
  /** RegularExpression Id. */
  int K_SET = 37;
  /** RegularExpression Id. */
  int K_INSERT = 38;
  /** RegularExpression Id. */
  int K_INTO = 39;
  /** RegularExpression Id. */
  int K_VALUES = 40;
  /** RegularExpression Id. */
  int K_NOT = 41;
  /** RegularExpression Id. */
  int K_NULL = 42;
  /** RegularExpression Id. */
  int K_BETWEEN = 43;
  /** RegularExpression Id. */
  int K_DESC = 44;
  /** RegularExpression Id. */
  int K_ASC = 45;
  /** RegularExpression Id. */
  int K_EXISTS = 46;
  /** RegularExpression Id. */
  int K_GROUP = 47;
  /** RegularExpression Id. */
  int K_HAVING = 48;
  /** RegularExpression Id. */
  int K_IS = 49;
  /** RegularExpression Id. */
  int K_ORDER = 50;
  /** RegularExpression Id. */
  int K_BY = 51;
  /** RegularExpression Id. */
  int K_LIKE = 52;
  /** RegularExpression Id. */
  int K_IN = 53;
  /** RegularExpression Id. */
  int K_LIMIT = 54;
  /** RegularExpression Id. */
  int K_OFFSET = 55;
  /** RegularExpression Id. */
  int K_TRUE = 56;
  /** RegularExpression Id. */
  int K_FALSE = 57;
  /** RegularExpression Id. */
  int S_NUMBER = 58;
  /** RegularExpression Id. */
  int FLOAT = 59;
  /** RegularExpression Id. */
  int INTEGER = 60;
  /** RegularExpression Id. */
  int DIGIT = 61;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 62;
  /** RegularExpression Id. */
  int IDENTIFIER = 63;
  /** RegularExpression Id. */
  int LETTER = 64;
  /** RegularExpression Id. */
  int SPECIAL_CHARS = 65;
  /** RegularExpression Id. */
  int S_VALUE = 66;
  /** RegularExpression Id. */
  int S_P_IDENTIFIER = 71;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\",\"",
    "\"?\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"||\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\":\"",
    "\"ALL\"",
    "\"AS\"",
    "\"SELECT\"",
    "\"DISTINCT\"",
    "\"DELETE\"",
    "\"AND\"",
    "\"OR\"",
    "\"FROM\"",
    "\"WHERE\"",
    "\"COUNT\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"SUM\"",
    "\"AVG\"",
    "\"LEFT\"",
    "\"RIGHT\"",
    "\"INNER\"",
    "\"FULL\"",
    "\"OUTER\"",
    "\"JOIN\"",
    "\"ON\"",
    "\"UPDATE\"",
    "\"SET\"",
    "\"INSERT\"",
    "\"INTO\"",
    "\"VALUES\"",
    "\"NOT\"",
    "\"NULL\"",
    "\"BETWEEN\"",
    "\"DESC\"",
    "\"ASC\"",
    "\"EXISTS\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"IS\"",
    "\"ORDER\"",
    "\"BY\"",
    "\"LIKE\"",
    "\"IN\"",
    "\"LIMIT\"",
    "\"OFFSET \"",
    "\"TRUE\"",
    "\"FALSE\"",
    "<S_NUMBER>",
    "<FLOAT>",
    "<INTEGER>",
    "<DIGIT>",
    "<S_IDENTIFIER>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<SPECIAL_CHARS>",
    "<S_VALUE>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<S_P_IDENTIFIER>",
  };

}
